#!/bin/bash
#PBS -l nodes=1:ppn=4

REPLICATES=2
MIN_N_CLASS=500
GENOME="mm9"
SAMPLE_COUNT=4

#### usage ####
usage() {
	echo Program: "nfrDynAna2Matrix (compute matrix containing activity features corresponding to input coordinates in BED format)"
	echo Author: BRIC, University of Copenhagen, Denmark
	echo Version: 1.0
	echo Contact: pundhir@binf.ku.dk
	echo "Usage: nfrDynAna2Matrix -i <file> -j <file> -o <dir> [OPTIONS]"
	echo "Options:"
	echo " -i <file>   [input genomic coordinates in BED format (can be stdin)]"
    echo "             [output from nfrDynAna script]"
    echo " -o <dir>    [output directory]"
    echo " -j <file>   [configuration file]"
    echo "[OPTIONS]"
    echo " -r <int>    [number of replicates. used to compute mean (default: 2)]"
    echo " -n <int>    [minimum number of elements within each nfr dynamic class (default: 500)]"
    echo " -g <string> [genome (default: mm9)]"
    echo "[OPTIONS: chip2geneExprCor]"
    echo " -x <int>    [number of samples for which to compute gene expression (default: 4)]"
	echo " -h          [help]"
    echo "[NOTE]"
    echo " In case of error: Could not open input BAM files, refer to:"
    echo " https://groups.google.com/forum/#!msg/bedtools-discuss/_LNuoRWHn50/14MaqyzyzXsJ"
    echo " i.e. make sure header of all input bam files is identical"
	echo
	exit 0
}

#### parse options ####
while getopts i:o:j:r:n:g:x:h ARG; do
    case "$ARG" in
    i) BED_FILE=$OPTARG;;
    o) OUTDIR=$OPTARG;;
    j) CONFIG_FILE=$OPTARG;;
    r) REPLICATES=$OPTARG;;
    n) MIN_N_CLASS=$OPTARG;;
    g) GENOME=$OPTARG;;
    x) SAMPLE_COUNT=$OPTARG;;
    h) HELP=1;;
    esac
done

## usage, if necessary file and directories are given/exist
if [ -z "$BED_FILE" -o ! -f "$CONFIG_FILE" -o ! -d "$OUTDIR" -o "$HELP" ]; then
	usage
fi

## populating files based on input genome
if [ "$GENOME" == "mm9" ]; then
    GENOME_FILE="/home/pundhir/project/genome_annotations/mouse.mm9.genome"
elif [ "$GENOME" == "hg19" ]; then
    GENOME_FILE="/home/pundhir/project/genome_annotations/human.hg19.genome"
else
    echo "Presently the program only support analysis for mm9 or hg19"
    echo
    usage
fi

## create temporary BED file if input is from stdin
if [ "$BED_FILE" == "stdin" ]; then
    TMP=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)
    while read LINE; do
        echo ${LINE}
    done | perl -ane '$line=""; foreach(@F) { $line.="$_\t"; } $line=~s/\t$//g; print "$line\n";' > $OUTDIR/$TMP
    BED_FILE=$OUTDIR/$TMP
fi

## filter input BED file based on minimum number of elements within each nfr dynamic class
for CLASS in $(cat $BED_FILE | cut -f 5 | sort | uniq -c | sed -E 's/^\s+//g' | sort -k 1rn,1 | perl -ane 'if($F[0]>'$MIN_N_CLASS') { print "$F[1]\n"; }'); do perl -ane 'if($F[4]=~/^'$CLASS'$/) { print $_; }' $BED_FILE; done > $OUTDIR/NFR_DYNAMICS_SIG
BED_FILE="NFR_DYNAMICS_SIG"

## read configuration file
BAM_FILE_NFRDIP=$(cat $CONFIG_FILE | perl -ane '
    if($_=~/^nfrdip/) {
        $file.="$F[1],";
    } END {
        $file=~s/\,$//g;
        print "$file\n";
    }'
)
#echo $BAM_FILE_NFRDIP

BAM_FILE_TPM=$(cat $CONFIG_FILE | perl -ane '
    if($_=~/^tpm/) {
        $file.="$F[1],";
    } END {
        $file=~s/\,$//g;
        print "$file\n";
    }'
)
#echo $BAM_FILE_TPM

BED_FILE_EXPR=$(cat $CONFIG_FILE | perl -ane '
    if($_=~/^expr/) {
        $file.="$F[1],";
    } END {
        $file=~s/\,$//g;
        print "$file\n";
    }'
)
#echo $BED_FILE_EXPR

## compute nfr dip
NCOL=$(head $OUTDIR/$BED_FILE -n 1 | perl -ane '$ncol=scalar(@F)+1; print "$ncol";')
if [ ! -z "$BAM_FILE_NFRDIP" ]; then
    bed2window -i $OUTDIR/$BED_FILE -w 50 -s | bed2nfrdipV2 -i stdin -j $BAM_FILE_NFRDIP -t | rep2mean -i stdin -s $NCOL -n $REPLICATES >  $OUTDIR/$BED_FILE.nfrdip
fi

## compute TPM for TF binding
NCOL=$(head $OUTDIR/$BED_FILE -n 1 | perl -ane '$ncol=scalar(@F)+1; print "$ncol";')
if [ ! -z "$BAM_FILE_TPM" ]; then
    bed2window -i $OUTDIR/$BED_FILE -w 500 | bed2expr -i stdin -j $BAM_FILE_TPM -m -d -g $GENOME | rep2mean -i stdin -s $NCOL -n $REPLICATES > $OUTDIR/$BED_FILE.tpm
fi

## compute proximal gene expression
if [ ! -z "$BED_FILE_EXPR" ]; then
    chip2geneExprCor -i $OUTDIR/$BED_FILE -j $BED_FILE_EXPR -k $SAMPLE_COUNT -n > $OUTDIR/$BED_FILE.expr
fi

## compute number of proximal genes
if [ ! -z "$BED_FILE_EXPR" ]; then
    intersectBed -a $OUTDIR/$BED_FILE -b $BED_FILE_EXPR -c > $OUTDIR/$BED_FILE.count
fi

## remove temporary file
if [ ! -z "$TMP" ]; then
    rm $OUTDIR/$TMP
fi
