#!/bin/bash
#PBS -l nodes=1:ppn=4

OUTDIR="nfr_dynamics";
GENOME="mm9"
PROCESSOR=1
MIN_N_CLASS=50
GENE_ORDER="none"

#### usage ####
usage() {
	echo Program: "nfrDynAna (study nfr dynamics across multiple ChIP-seq samples)"
	echo Author: BRIC, University of Copenhagen, Denmark
	echo Version: 1.0
	echo Contact: pundhir@binf.ku.dk
	echo "Usage: nfrDynAna -i <file> -j <dir> -k <string> [OPTIONS]"
	echo "Options:"
	echo " -i <file>           [file(s) containing NFRs in BED format]"
    echo "                     [if multiple, seperate them by a comma]"
	echo " -j <string>         [a unique identifier for each input NFR file (like the sample name)]"
    echo "                     [if multiple, seperate them by a comma]"
    echo " -k <dir>            [input directory containing BAM files for various histone marks]"
    echo "[OPTIONS]"
    echo " -l <file | stdin>   [file containing TF coordinate. Analyze NFRs which overlap the TF coordinate]"
    echo " -v                  [exclude NFRs which overlap the TF coordinate]"
    echo " -o <dir>            [output directory to store results (default: ./nfr_dynamics)"
    echo " -f <string>         [filter BAM files matching identifiers eg. wt or gmp]"
    echo "                     [if multiple, seperate them by a comma]"
    echo " -d <string>         [filter BAM files not matching identifiers eg. wt or gmp]"
    echo "                     [if multiple seperate them by a comma]"
    echo " -g <string>         [genome (default: mm9]"
    echo " -t                  [plot profile for transcription factors instead]"
    echo "                     [input BAM files are for transcription factor ChIP]"
    echo " -e <string>         [input file containing gene expression values]"
    echo "                     [also compute the gene expression distribution for each NFR class]"
    echo "                     [example: /home/pundhir/project/genome_annotations/gencode_v19_hg19_gtf_tss_5000bp.expr]"
    echo " -n <int>            [number of samples for which gene expression values will be plotted]"
    echo " -m <string>         [name of samples for which gene expression values will be plotted]"
    echo "                     [if multiple seperate them by a comma]"
    echo " -r                  [gene expression is only measured for single replicate]"
    echo " -p <int>            [number of processor to use (default: 1)]"
    echo " -x <float>          [maximum limit to y-axis in nfr dynamics plot (default: computed automatically)]"
    echo " -y <int>            [minimum number of elements within each nfr dynamic class to plot (default: 50)]"
    echo " -a <string>         [gene order algorithm for heatmap (default: none)]"
    echo "                     [total, hc, max, prod, diff, km, none]"
	echo " -h                  [help]"
	echo
	exit 0
}

#### parse options ####
while getopts i:j:k:l:vo:f:d:g:te:n:m:p:rx:y:a:h ARG; do
	case "$ARG" in
		i) NFR=$OPTARG;;
		j) NFRID=$OPTARG;;
        k) CHIPDIR=$OPTARG;;
		l) TFSUMMIT=$OPTARG;;
        v) TFSUMMIT_EXCL=1;;
        o) OUTDIR=$OPTARG;;
        f) CHIP_INCL_FILTER=$OPTARG;;
        d) CHIP_EXCL_FILTER=$OPTARG;;
        g) GENOME=$OPTARG;;
        t) TFPROFILE=1;;
        e) EXPRFILE=$OPTARG;;
        n) SAMPLECOUNTS=$OPTARG;;
        m) SAMPLENAMES=$OPTARG;;
        r) EXPRREP_ABSENT=1;;
        p) PROCESSOR=$OPTARG;;
        x) YMAX=$OPTARG;;
        y) MIN_N_CLASS=$OPTARG;;
        a) GENE_ORDER=$OPTARG;;
		h) HELP=1;;
	esac
done

echo
if [ "$HELP" ]; then
    usage
fi

echo
echo -n "Check, if all required parameters and files are provided (`date`).. "
## usage, if necessary file and directories are given/exist
if [ -z "$NFR" -o -z "$CHIPDIR" -o -z "$NFRID" ]; then
    echo
    echo "Error: one or more required paramter values not provided"
    echo
	usage
fi
echo "done"

###################
#helperfunction
function wait_for_jobs_to_finish {
    for job in `jobs -p`
    do
        echo $job
        wait $job
    done
    echo $1
}
###############

echo -n "Create directory structure (`date`).. "
if [ ! -d "$OUTDIR" ]; then
    mkdir $OUTDIR
fi
if [ ! -d "$OUTDIR/motifs" -a -z "$TFPROFILE" ]; then
    mkdir $OUTDIR/motifs
fi
if [ ! -d "$OUTDIR/go_analysis" ]; then
    mkdir $OUTDIR/go_analysis
fi
if [ ! -d "$OUTDIR/heatmap" ]; then
    mkdir $OUTDIR/heatmap
fi
echo "done"

echo -n "Populating files based on input genome, $GENOME (`date`).. "
if [ "$GENOME" == "mm9" ]; then
    GENOME_FILE="/home/pundhir/project/genome_annotations/mouse.mm9.genome"
    REPEAT_FILE="/home/pundhir/project/genome_annotations/mouse.mm9.simpleRepeat.gz"
elif [ "$GENOME" == "hg19" ]; then
    GENOME_FILE="/home/pundhir/project/genome_annotations/human.hg19.genome"
    REPEAT_FILE="/home/pundhir/project/genome_annotations/human.hg19.simpleRepeat.gz"
else
    echo "Presently the program only support analysis for mm9 or hg19"
    echo
    usage
fi
echo done

if [ ! -z "$TFSUMMIT" ]; then
    echo -n "Create TF summit file (`date`).. "
    if [ "$TFSUMMIT" == "stdin" ]; then
        while read LINE; do
            echo ${LINE}
        done | perl -ane '$line=(); foreach(@F) { chomp($_); $line.="$_\t"; } $line=~s/\t$//g; print "$line\n"' > $OUTDIR/TFSUMMIT.BED
    elif [ -f "$TFSUMMIT" ]; then
        scp $TFSUMMIT $OUTDIR/TFSUMMIT.BED
    else
        usage
    fi
    echo "done"
fi

echo -n "Retrieve NFR to analyse based on input criteria (`date`).. "
    if [ ! -z "$TFSUMMIT" ]; then
        if [ -z "$TFSUMMIT_EXCL" ]; then
            intersectBed -a <(multiIntersectBed.sh -i $NFR -j $NFRID) -b $OUTDIR/TFSUMMIT.BED -u > $OUTDIR/NFR_DYNAMICS.TXT
        else
            intersectBed -a <(multiIntersectBed.sh -i $NFR -j $NFRID) -b $OUTDIR/TFSUMMIT.BED -v > $OUTDIR/NFR_DYNAMICS.TXT
        fi
    else
        multiIntersectBed.sh -i $NFR -j $NFRID > $OUTDIR/NFR_DYNAMICS.TXT
    fi
echo "done"

echo -n "Plot ChIP profile for each NFR dynamic class (`date`).. "
SESSION_FILES=""
PLOT_TITLES=""
REGIONS_INTEREST_COUNTS=""
HEATMAP_FILES=""
for CLASS in $(cat $OUTDIR/NFR_DYNAMICS.TXT | cut -f 5 | sort | uniq -c | sed -E 's/^\s+//g' | sort -k 1rn,1 | perl -ane 'if($F[0]>50) { print "$F[1]\n"; }'); do
    PLOT_TITLE=$(echo $CLASS | sed 's/\,/_/g')
    REGIONS_INTEREST_COUNT=$(perl -ane 'if($F[4]=~/^'$CLASS'$/) { print $_; }' $OUTDIR/NFR_DYNAMICS.TXT | wc -l)

    if [ ! -f "$OUTDIR/$PLOT_TITLE.avgprof.RData" ]; then
        if [ ! -z "$CHIP_INCL_FILTER" -a ! -z "$CHIP_EXCL_FILTER" ]; then
            perl -ane 'if($F[4]=~/^'$CLASS'$/) { print $_; }' $OUTDIR/NFR_DYNAMICS.TXT | ngsPlot -i stdin -j $CHIPDIR -o $OUTDIR -f $CHIP_INCL_FILTER -g $GENOME -d $CHIP_EXCL_FILTER -t $PLOT_TITLE -m -x 1 -a $GENE_ORDER
        elif [ ! -z "$CHIP_INCL_FILTER" ]; then
            perl -ane 'if($F[4]=~/^'$CLASS'$/) { print $_; }' $OUTDIR/NFR_DYNAMICS.TXT | ngsPlot -i stdin -j $CHIPDIR -o $OUTDIR -f $CHIP_INCL_FILTER -g $GENOME -t $PLOT_TITLE -m -x 1 -a $GENE_ORDER
        elif [ ! -z "$CHIP_EXCL_FILTER" ]; then
            perl -ane 'if($F[4]=~/^'$CLASS'$/) { print $_; }' $OUTDIR/NFR_DYNAMICS.TXT | ngsPlot -i stdin -j $CHIPDIR -o $OUTDIR -g $GENOME -d $CHIP_EXCL_FILTER -t $PLOT_TITLE -m -x 1 -a $GENE_ORDER
        else
            perl -ane 'if($F[4]=~/^'$CLASS'$/) { print $_; }' $OUTDIR/NFR_DYNAMICS.TXT | ngsPlot -i stdin -j $CHIPDIR -o $OUTDIR -g $GENOME -t $PLOT_TITLE -m -x 1 -a $GENE_ORDER
        fi
    fi

    SESSION_FILES="$SESSION_FILES,$OUTDIR/$PLOT_TITLE"
    PLOT_TITLES="$PLOT_TITLES,$PLOT_TITLE"
    REGIONS_INTEREST_COUNTS="$REGIONS_INTEREST_COUNTS,$REGIONS_INTEREST_COUNT"

    ## create files for plotting normalized heatmap
    HEATMAP_FILES="$HEATMAP_FILES,$OUTDIR/heatmap/$PLOT_TITLE"".bed"
    perl -ane 'if($F[4]=~/^'$CLASS'$/) { print $_; }' $OUTDIR/NFR_DYNAMICS.TXT > $OUTDIR/heatmap/$PLOT_TITLE.bed
done
echo "done"

echo -n "Plot NFR dynamics across different samples (`date`).. "
SESSION_FILES=$(echo $SESSION_FILES | sed -E 's/^\,//g')
PLOT_TITLES=$(echo $PLOT_TITLES | sed -E 's/^\,//g')
REGIONS_INTEREST_COUNTS=$(echo $REGIONS_INTEREST_COUNTS | sed -E 's/^\,//g')
HEATMAP_FILES=$(echo $HEATMAP_FILES | sed -E 's/^\,//g')

## plot nfr dynamics as heatmap
if [ ! -f "$OUTDIR/heatmap/heatmap.avgprof.RData" ]; then
    if [ ! -z "$CHIP_INCL_FILTER" -a ! -z "$CHIP_EXCL_FILTER" ]; then
        ngsPlot -i $HEATMAP_FILES -j $CHIPDIR -o $OUTDIR/heatmap -f $CHIP_INCL_FILTER -g $GENOME -d $CHIP_EXCL_FILTER -t heatmap -u $PLOT_TITLES -m -a $GENE_ORDER
    elif [ ! -z "$CHIP_INCL_FILTER" ]; then
        ngsPlot -i $HEATMAP_FILES -j $CHIPDIR -o $OUTDIR/heatmap -f $CHIP_INCL_FILTER -g $GENOME -t heatmap -u $PLOT_TITLES -m -a $GENE_ORDER
    elif [ ! -z "$CHIP_EXCL_FILTER" ]; then
        ngsPlot -i $HEATMAP_FILES -j $CHIPDIR -o $OUTDIR/heatmap -g $GENOME -d $CHIP_EXCL_FILTER -t heatmap -u $PLOT_TITLES -m -a $GENE_ORDER
    else
        ngsPlot -i $HEATMAP_FILES -j $CHIPDIR -o $OUTDIR/heatmap -g $GENOME -t heatmap -u $PLOT_TITLES -m -a $GENE_ORDER
    fi
fi
nfrDynAna.R -i $OUTDIR/heatmap/heatmap -j heatmap -o NONE -m $GENE_ORDER

## plot nfr dynamics as line plot
if [ ! -z "$TFPROFILE" ]; then
    if [ ! -z "$YMAX" ]; then
        nfrDynAna.R -i $SESSION_FILES -j $PLOT_TITLES -k $REGIONS_INTEREST_COUNTS -o $OUTDIR/nfr_dynamics.pdf -r $NFRID -t -x $YMAX
    else
        nfrDynAna.R -i $SESSION_FILES -j $PLOT_TITLES -k $REGIONS_INTEREST_COUNTS -o $OUTDIR/nfr_dynamics.pdf -r $NFRID -t
    fi
else
    if [ ! -z "$YMAX" ]; then
        nfrDynAna.R -i $SESSION_FILES -j $PLOT_TITLES -k $REGIONS_INTEREST_COUNTS -o $OUTDIR/nfr_dynamics.pdf -r $NFRID -x $YMAX
    else
        nfrDynAna.R -i $SESSION_FILES -j $PLOT_TITLES -k $REGIONS_INTEREST_COUNTS -o $OUTDIR/nfr_dynamics.pdf -r $NFRID
    fi
fi
echo "done"

if [ -z "$TFPROFILE" ]; then
    INPUT_MOTIF_DYN_ANA=""
    echo -n "Perform motif analysis for each NFR dynamic class (`date`).. "
    for CLASS in $(cat $OUTDIR/NFR_DYNAMICS.TXT | cut -f 5 | sort | uniq -c | sed -E 's/^\s+//g' | sort -k 1rn,1 | perl -ane 'if($F[0]>50) { print "$F[1]\n"; }'); do
        PLOT_TITLE=$(echo $CLASS | sed 's/\,/_/g')
        if [ ! -d "$OUTDIR/motifs/$PLOT_TITLE" ]; then
            #perl -ane 'if($F[4]=~/^'$CLASS'$/) { print $_; }' $OUTDIR/NFR_DYNAMICS.TXT | motifAna -i stdin -o $OUTDIR/motifs/$PLOT_TITLE -m 1 -g $GENOME -p $PROCESSOR -t 7,8,9,10,11,12,13,14 -u 0.75 -v 1.5 -w 50 -x 1e-15 -z 30
            perl -ane 'if($F[4]=~/^'$CLASS'$/) { print $_; }' $OUTDIR/NFR_DYNAMICS.TXT | motifAna -i stdin -o $OUTDIR/motifs/$PLOT_TITLE -m 1 -g $GENOME -p $PROCESSOR -t 7,8,9,10,11,12,13,14 -u 0.75 -v 1.5 -x 1e-15 -y 3 -n 100
        fi
        INPUT_MOTIF_DYN_ANA="$INPUT_MOTIF_DYN_ANA,$OUTDIR/motifs/$PLOT_TITLE" 
    done
    echo "done"

    echo -n "Perform dynamics in the enrichment of motifs across NFR classes (`date`).. "
    INPUT_MOTIF_DYN_ANA=$(echo $INPUT_MOTIF_DYN_ANA | sed -E 's/^\,//')
    if [ ! -f "$OUTDIR/motif_dynamics.pdf" ]; then
        motifDynAna -i $INPUT_MOTIF_DYN_ANA -o $OUTDIR -g $GENOME -p $PROCESSOR -c 50 -u 0.75 -v 1.5 -x 1.1 
    fi
    echo "done"
else
    echo -n "Perform expression analysis of TF at each NFR dynamic class (`date`).. "
    if [ ! -f "$OUTDIR/NFR_TF_EXPR.bed" ]; then
        BAMFILES=$(cut -f 1 $OUTDIR/NGSPLOT.txt | perl -ane 'chomp($_); $line.="$_,"; END { $line=~s/\,$//g; print "$line\n"; }')
        for CLASS in $(cat $OUTDIR/NFR_DYNAMICS.TXT | cut -f 5 | sort | uniq -c | sed -E 's/^\s+//g' | sort -k 1rn,1 | perl -ane 'if($F[0]>50) { print "$F[1]\n"; }'); do
            perl -ane 'if($F[4]=~/^'$CLASS'$/) { print $_; }' $OUTDIR/NFR_DYNAMICS.TXT | bed2window -i stdin -w 500 | bed2expr -i stdin -j $BAMFILES -m -d -g $GENOME 
        done > $OUTDIR/NFR_TF_EXPR.bed
    fi
    echo "done"
    
    echo -n "Plot TF ChIP-seq signal for each NFR dynamics class (`date`).. "
    BAMNAMES=$(cut -f 3 $OUTDIR/NGSPLOT.txt | perl -ane 'chomp($_); $_=~s/\"//g; $_=~s/\_Rep.*//g; $line.="$_,"; END { $line=~s/\,$//g; print "$line\n"; }')
    nfrDynAnaWithExpr.R -i $OUTDIR/NFR_TF_EXPR.bed -d $BAMNAMES -o $OUTDIR/nfr_dynamics_tf_expr.pdf -n $MIN_N_CLASS
    echo "done"

    if [ ! -z "$EXPRFILE" ]; then
        echo -n "Plot gene expression for each NFR dynamics class (`date`).. "
        if [ -z "$SAMPLECOUNTS" ]; then
            SAMPLECOUNTS=$(cut -f 1 $OUTDIR/NGSPLOT.txt | wc -l)
        fi

        if [ -z "$SAMPLENAMES" ]; then
            SAMPLENAMES=$(cut -f 3 $OUTDIR/NGSPLOT.txt | perl -ane 'chomp($_); $_=~s/\"//g; $_=~s/\_Rep.*//g; $line.="$_,"; END { $line=~s/\,$//g; print "$line\n"; }')
        fi

        #echo "chip2geneExprCor -i $OUTDIR/NFR_DYNAMICS.TXT -j $EXPRFILE -k $SAMPLECOUNTS > $OUTDIR/NFR_GENE_EXPR.bed"
        for CLASS in $(cat $OUTDIR/NFR_DYNAMICS.TXT | cut -f 5 | sort | uniq -c | sed -E 's/^\s+//g' | sort -k 1rn,1 | perl -ane 'if($F[0]>50) { print "$F[1]\n"; }'); do
            perl -ane 'if($F[4]=~/^'$CLASS'$/) { print $_; }' $OUTDIR/NFR_DYNAMICS.TXT | chip2geneExprCor -i stdin -j $EXPRFILE -k $SAMPLECOUNTS
            #perl -ane 'if($F[4]=~/^'$CLASS'$/) { print $_; }' $OUTDIR/NFR_DYNAMICS.TXT
        done > $OUTDIR/NFR_GENE_EXPR.bed

        if [ ! -z "$EXPRREP_ABSENT" ]; then
            nfrDynAnaWithExpr.R -i $OUTDIR/NFR_GENE_EXPR.bed -d $SAMPLENAMES -o $OUTDIR/nfr_dynamics_gene_expr.pdf -c 4 -m F -n $MIN_N_CLASS
        else
            nfrDynAnaWithExpr.R -i $OUTDIR/NFR_GENE_EXPR.bed -d $SAMPLENAMES -o $OUTDIR/nfr_dynamics_gene_expr.pdf -c 4 -n $MIN_N_CLASS
        fi
        echo "done"

        echo -n "Plot differentially enriched GO categories for each NFR dynamics class (`date`).. "
        ## ANALYSIS ASSUMES THAT GENE ID TYPE ARE ENSEMBL TRANSCRIPT ID
        for CLASS in $(cat $OUTDIR/NFR_DYNAMICS.TXT | cut -f 5 | sort | uniq -c | sed -E 's/^\s+//g' | sort -k 1rn,1 | perl -ane 'if($F[0]>50) { print "$F[1]\n"; }'); do
            grep -w $CLASS $OUTDIR/NFR_GENE_EXPR.bed | perl -ane '$start=scalar(@F)-'$SAMPLECOUNTS'; $end=scalar(@F)-1; $expr=0; foreach(@F[$start..$end]) { $expr+=$_; } @t=split(/\,/,$F[4]); foreach(@t) { $_=~s/\..*//g; print "$_\t$expr\n"; }' | sort -k 2rn,2 -k 1,1 | perl -ane 'if(!$seen{$F[0]}) { print "$F[0]\t'$CLASS'\n"; $seen{$F[0]}=1; }'
        done > $OUTDIR/go_analysis/ID_FOR_GO.TXT

        #goAna -i $OUTDIR/go_analysis/ID_FOR_GO.TXT -o $OUTDIR/go_analysis -g $GENOME -d ENSEMBLTRANS -a GOTERM_BP_ALL -f -m 5
        echo "done"
    fi
fi
echo "All done, bye"

<<"COMMENT"
## OLD CODE
    echo -n "Analyze differential usage of motifs between NFR classes (`date`).. "
    for CLASS in $(cat $OUTDIR/NFR_DYNAMICS.TXT | cut -f 5 | sort | uniq -c | sed -E 's/^\s+//g' | sort -k 1rn,1 | perl -ane 'if($F[0]>50) { print "$F[1]\n"; }'); do
        PLOT_TITLE=$(echo $CLASS | sed 's/\,/_/g')
        REGIONS_INTEREST_COUNT=$(perl -ane 'if($F[4]=~/^'$CLASS'$/) { print $_; }' $OUTDIR/NFR_DYNAMICS.TXT | wc -l)
        #cat $OUTDIR/motifs/$PLOT_TITLE/DENOVO_MOTIFS.TXT $OUTDIR/motifs/$PLOT_TITLE/KNOWN_MOTIFS.TXT | perl -ane '$F[0]=~s/\(.*//g; print "'$PLOT_TITLE"_"$REGIONS_INTEREST_COUNT'\t$F[0]\t$F[1]\t$F[2]\t$F[3]\t$F[4]\n";'
        cat $OUTDIR/motifs/$PLOT_TITLE/DENOVO_MOTIFS.TXT | perl -ane '$F[0]=~s/\(.*//g; print "'$PLOT_TITLE"_"$REGIONS_INTEREST_COUNT'\t$F[0]\t$F[1]\t$F[2]\t$F[3]\t$F[4]\n";'
    done > $OUTDIR/MOTIF_DYNAMICS.TXT

    for CLASS in $(cat $OUTDIR/NFR_DYNAMICS.TXT | cut -f 5 | sort | uniq -c | sed -E 's/^\s+//g' | sort -k 1rn,1 | perl -ane 'if($F[0]>50) { print "$F[1]\n"; }'); do
        PLOT_TITLE=$(echo $CLASS | sed 's/\,/_/g')
        REGIONS_INTEREST_COUNT=$(perl -ane 'if($F[4]=~/^'$CLASS'$/) { print $_; }' $OUTDIR/NFR_DYNAMICS.TXT | wc -l)
        cat $OUTDIR/motifs/$PLOT_TITLE/UNIQ_MOTIFS.TXT | perl -ane '$F[0]=~s/\(.*//g; print "'$PLOT_TITLE"_"$REGIONS_INTEREST_COUNT'\t$F[0]\t$F[1]\t$F[2]\t$F[3]\t$F[4]\n";'
    done > $OUTDIR/UNIQ_MOTIF_DYNAMICS.TXT
    echo "done"

    echo -n "Plot motif dynamics across different samples (`date`).. "
    #motifDynAna.R -i $OUTDIR/UNIQ_MOTIF_DYNAMICS.TXT -o $OUTDIR/motif_dynamics.pdf
    motifDynAna.R -i $OUTDIR/MOTIF_DYNAMICS.TXT -o $OUTDIR/motif_dynamics.pdf
    echo "done"
COMMENT
