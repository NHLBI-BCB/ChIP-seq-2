#!/bin/bash
#PBS -l nodes=1:ppn=4

WIN=200;

#### usage ####
usage() {
	echo Program: "bed2window (create BED file flanking input bp to coodinates in a BED file)"
	echo Author: BRIC, University of Copenhagen, Denmark
	echo Version: 1.0
	echo Contact: pundhir@binf.ku.dk
	echo "Usage: bed2window -i <file | stdin>"
	echo "Options:"
	echo " -i <file>   [input file containing genomic coordinate in BED format]"
    echo "[OPTIONS]"
    echo " -w <int>    [flanking window length (default: 200 bp)]"
    echo "             [200 bp up- and downstream to middle point]"
    echo " -t          [instead of mid point flank it to the TSS]"
    echo " -u          [instead of mid point flank it to the TSS, however keep the whole gene region intact]"
    echo " -l          [instead of mid point flank it to the left coordinate boundary]"
    echo " -r          [instead of mid point flank it to the right coordinate boundary]"
    echo " -s          [do not sort output BED file]"
    echo " -m          [mark window flanking to left as from - and to right as from + strand]"
    echo "             [only valid with -l or -r parameters]"
	echo " -h          [help]"
	echo
	exit 0
}

#### parse options ####
while getopts i:w:tulrsmh ARG; do
	case "$ARG" in
		i) INPUTBEDFILE=$OPTARG;;
        w) WIN=$OPTARG;;
        t) TSS=1;;
        u) TSS_GENE=1;;
        l) LEFT=1;;
        r) RIGHT=1;;
        s) NOSORT=1;;
        m) MARK_STRAND=1;;
		h) HELP=1;;
	esac
done

## usage, if necessary file and directories are given/exist
if [ -z "$INPUTBEDFILE" -o "$HELP" ]; then
	usage
fi

if [ ! -z "$TSS" ]; then
    if [ -f "$INPUTBEDFILE" ]; then
        zless $INPUTBEDFILE | grep -v "^\#" | perl -ane 'if($F[5]=~/^\-$/) { $start=$F[2]; $end=$start+'$WIN'; } else { $end=$F[1]; $start=$end-'$WIN'; } $chr=$F[0]; if($start<0) { $start=1 } $line="$chr\t$start\t$end\t"; foreach(@F[3..scalar(@F)-1]) { $line.="$_\t"; } $line=~s/\t$//g; print "$line\n";' 
    elif [ "$INPUTBEDFILE" == "stdin" ]; then 
        while read LINE; do echo ${LINE}; done | grep -v "^\#" | perl -ane 'if($F[5]=~/^\-$/) { $start=$F[2]; $end=$start+'$WIN'; } else { $end=$F[1]; $start=$end-'$WIN'; } $chr=$F[0]; if($start<0) { $start=1 } $line="$chr\t$start\t$end\t"; foreach(@F[3..scalar(@F)-1]) { $line.="$_\t"; } $line=~s/\t$//g; print "$line\n";'
    else
        usage
    fi
elif [ ! -z "$TSS_GENE" ]; then
    if [ -f "$INPUTBEDFILE" ]; then
        zless $INPUTBEDFILE | grep -v "^\#" | perl -ane 'if($F[5]=~/^\-$/) { $start=$F[1]; $end=$F[2]+'$WIN'; } else { $end=$F[2]; $start=$F[1]-'$WIN'; } $chr=$F[0]; if($start<0) { $start=1 } $line="$chr\t$start\t$end\t"; foreach(@F[3..scalar(@F)-1]) { $line.="$_\t"; } $line=~s/\t$//g; print "$line\n";' 
    elif [ "$INPUTBEDFILE" == "stdin" ]; then 
        while read LINE; do echo ${LINE}; done | grep -v "^\#" | perl -ane 'if($F[5]=~/^\-$/) { $start=$F[1]; $end=$F[2]+'$WIN'; } else { $end=$F[2]; $start=$F[1]-'$WIN'; } $chr=$F[0]; if($start<0) { $start=1 } $line="$chr\t$start\t$end\t"; foreach(@F[3..scalar(@F)-1]) { $line.="$_\t"; } $line=~s/\t$//g; print "$line\n";'
    else
        usage
    fi
elif [ ! -z "$LEFT" ]; then    
    if [ -f "$INPUTBEDFILE" ]; then
        zless $INPUTBEDFILE | grep -v "^\#" | perl -ane '$chr=$F[0]; $start=$F[1]-'$WIN'; $end=$F[1]; if($start<0) { $start=1 } $line="$chr\t$start\t$end\t"; foreach(@F[3..scalar(@F)-1]) { $line.="$_\t"; } $line=~s/\t$//g; print "$line\n";' 
    elif [ "$INPUTBEDFILE" == "stdin" ]; then 
        while read LINE; do echo ${LINE}; done | grep -v "^\#" | perl -ane '$chr=$F[0]; $start=$F[1]-'$WIN'; $end=$F[1]; if($start<0) { $start=1 } $line="$chr\t$start\t$end\t"; foreach(@F[3..scalar(@F)-1]) { $line.="$_\t"; } $line=~s/\t$//g; print "$line\n";' 
    else
        usage
    fi | if [ ! -z "$MARK_STRAND" ]; then perl -ane '$F[5]="-"; $line=(); foreach(@F) { $line.="$_\t"; } $line=~s/\t$//g; print "$line\n";'; else perl -ane 'print $_;'; fi 
elif [ ! -z "$RIGHT" ]; then    
    if [ -f "$INPUTBEDFILE" ]; then
        zless $INPUTBEDFILE | grep -v "^\#" | perl -ane '$chr=$F[0]; $start=$F[2]; $end=$F[2]+'$WIN'; if($start<0) { $start=1 } $line="$chr\t$start\t$end\t"; foreach(@F[3..scalar(@F)-1]) { $line.="$_\t"; } $line=~s/\t$//g; print "$line\n";' 
    elif [ "$INPUTBEDFILE" == "stdin" ]; then 
        while read LINE; do echo ${LINE}; done | grep -v "^\#" | perl -ane '$chr=$F[0]; $start=$F[2]; $end=$F[2]+'$WIN'; if($start<0) { $start=1 } $line="$chr\t$start\t$end\t"; foreach(@F[3..scalar(@F)-1]) { $line.="$_\t"; } $line=~s/\t$//g; print "$line\n";' 
    else
        usage
    fi | if [ ! -z "$MARK_STRAND" ]; then perl -ane '$F[5]="+"; $line=(); foreach(@F) { $line.="$_\t"; } $line=~s/\t$//g; print "$line\n";'; else perl -ane 'print $_;'; fi
else
    if [ -f "$INPUTBEDFILE" ]; then
        zless $INPUTBEDFILE | grep -v "^\#" | perl -ane '$mid=sprintf("%0.0f", ($F[1]+$F[2])/2); $chr=$F[0];$start=$mid-'$WIN'; $end=$mid+'$WIN'; if($start<0) { $start=1 } $line="$chr\t$start\t$end\t"; foreach(@F[3..scalar(@F)-1]) { $line.="$_\t"; } $line=~s/\t$//g; print "$line\n";' 
    elif [ "$INPUTBEDFILE" == "stdin" ]; then 
        while read LINE; do echo ${LINE}; done | grep -v "^\#" | perl -ane '$mid=sprintf("%0.0f", ($F[1]+$F[2])/2); $chr=$F[0];$start=$mid-'$WIN'; $end=$mid+'$WIN'; if($start<0) { $start=1 } $line="$chr\t$start\t$end\t"; foreach(@F[3..scalar(@F)-1]) { $line.="$_\t"; } $line=~s/\t$//g; print "$line\n";' 
    else
        usage
    fi
fi | if [ -z "$NOSORT" ]; then sortBed -i stdin; else perl -ane 'print $_;'; fi
exit
