#!/bin/bash
#PBS -l nodes=1:ppn=4

GENOME="mm9"

#### usage ####
usage() {
	echo Program: "nfrDynAna2MatrixGene (compute matrix containing activity features corresponding to genes in BED format)"
	echo Author: BRIC, University of Copenhagen, Denmark
	echo Version: 1.0
	echo Contact: pundhir@binf.ku.dk
	echo "Usage: nfrDynAna2MatrixGene -i <file> -j <file> [OPTIONS]"
	echo "Options:"
	echo " -i <file>   [input nfr coordinates in BED format]"
    echo "             [output from nfrDynAna script]"
	echo " -j <file>   [input gene coordinates in BED format (can be stdin)]"
    echo "[OPTIONS]"
    echo " -g <string> [genome (default: mm9)]"
	echo " -h          [help]"
	echo
	exit 0
}

#### parse options ####
while getopts i:j:g:h ARG; do
    case "$ARG" in
    i) BED_FILE=$OPTARG;;
    j) GENE_FILE=$OPTARG;;
    g) GENOME=$OPTARG;;
    h) HELP=1;;
    esac
done

## usage, if necessary file and directories are given/exist
if [ -z "$BED_FILE" -o ! -f "$GENE_FILE" -o "$HELP" ]; then
	usage
fi

## populating files based on input genome
if [ "$GENOME" == "mm9" ]; then
    GENOME_FILE="/home/pundhir/project/genome_annotations/mouse.mm9.genome"
elif [ "$GENOME" == "hg19" ]; then
    GENOME_FILE="/home/pundhir/project/genome_annotations/human.hg19.genome"
else
    echo "Presently the program only support analysis for mm9 or hg19"
    echo
    usage
fi

## create temporary BED file if input is from stdin
if [ "$BED_FILE" == "stdin" ]; then
    TMP=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)
    while read LINE; do
        echo ${LINE}
    done | perl -ane '$line=""; foreach(@F) { $line.="$_\t"; } $line=~s/\t$//g; print "$line\n";' > $TMP
    BED_FILE=$TMP
fi

## perform gene centric analysis
<<"COMMENT"
COMMENT

NCOL_GENE_FILE=$(head -n 1 $GENE_FILE | perl -ane 'print scalar(@F);')
NCOL_BED_FILE=$(head -n 1 $BED_FILE | cut -f 1-3,5,16-35,44 | perl -ane 'print scalar(@F);')
#echo -e "$NCOL_GENE_FILE\t$NCOL_BED_FILE"

#cat $GENE_FILE | perl -ane '@enhancer_info=`grep -w $F[3] '$BED_FILE' | cut -f 1-3,5,16-35,44`; if(scalar(@enhancer_info)>0) { for($i=0; $i<scalar(@enhancer_info); $i++) { chomp($_); chomp($enhancer_info[$i]); print "$_\t$enhancer_info[$i]\t1\n"; } } else { chomp($_); print "$_\t.\t-1\t-1\t"; for($i=4;$i<='$NCOL_BED_FILE';$i++) { print ".\t"; } print "0\n"; }' > test1; exit

#intersectBed -a $GENE_FILE -b <(cut -f 1-3,5,18,24,30,35,44 $BED_FILE | grep -v "start") -wao | sortBed -i stdin | 

cat $GENE_FILE | perl -ane '@enhancer_info=`grep -w $F[3] '$BED_FILE' | cut -f 1-3,5,16-35,44`; if(scalar(@enhancer_info)>0) { for($i=0; $i<scalar(@enhancer_info); $i++) { chomp($_); chomp($enhancer_info[$i]); print "$_\t$enhancer_info[$i]\t1\n"; } } else { chomp($_); print "$_\t.\t-1\t-1\t"; for($i=4;$i<='$NCOL_BED_FILE';$i++) { print ".\t"; } print "0\n"; }' | perl -ane '
    $id="$F[0]_$F[1]_$F[2]_$F[3]";
    $mid=sprintf("%0.0f", ($F['$((NCOL_GENE_FILE+1))']+$F['$((NCOL_GENE_FILE+2))'])/2);
    if($F[5]=~/\+/ && $F['$((NCOL_GENE_FILE+2))']>0) {
        #$dist=$F[2]-$mid;
        $dist=$mid-$F[1];
    }
    elsif($F[5]=~/\-/ && $F['$((NCOL_GENE_FILE+2))']>0) { 
        #$dist=$mid-$F[1];
        $dist=$F[2]-$mid;
    }
    else {
        $dist="NA";
    }
    if($i==0) {
        foreach(@F[0..'$((NCOL_GENE_FILE-1))']) { $des.="$_\t"; $seen{$id}=1; }
        $des=~s/\t$//g;
        $stage.="$F['$((NCOL_GENE_FILE+3))']";
        $h3k27ac.="$F['$((NCOL_GENE_FILE+6))']";
        $h3k4me1.="$F['$((NCOL_GENE_FILE+12))']";
        $pu1.="$F['$((NCOL_GENE_FILE+18))']";
        $cebpa.="$F['$((NCOL_GENE_FILE+23))']";
        if($F['$((NCOL_GENE_FILE+24))']=~/^\.$/ && $F['$((NCOL_GENE_FILE+6))']>0) {
            $F['$((NCOL_GENE_FILE+24))']="other";
        }
        if($F['$((NCOL_GENE_FILE+6))']>0) {
            $h3k4me1_pregm=$F['$((NCOL_GENE_FILE+11))'];
            $h3k4me1_pregm_ko=$F['$((NCOL_GENE_FILE+15))'];
            $h3k4me1_gmp=$F['$((NCOL_GENE_FILE+12))'];
            $h3k27ac_pregm=$F['$((NCOL_GENE_FILE+5))'];
            $h3k27ac_pregm_ko=$F['$((NCOL_GENE_FILE+9))'];
            $h3k27ac_gmp=$F['$((NCOL_GENE_FILE+6))'];
            $pu1_pregm=$F['$((NCOL_GENE_FILE+17))'];
            $pu1_pregm_ko=$F['$((NCOL_GENE_FILE+20))'];
            $pu1_gmp=$F['$((NCOL_GENE_FILE+18))'];
            $cebpa_pregm=$F['$((NCOL_GENE_FILE+22))'];
            $cebpa_gmp=$F['$((NCOL_GENE_FILE+23))'];
        }
        $cobound.="$F['$((NCOL_GENE_FILE+24))']";
        $distance.="$dist";
    }
    elsif($i>0 && !defined($seen{$id})) {
        if(defined($h3k4me1_pregm)) {
            $fc_h3k4me1_gmp_pregm = ($h3k4me1_gmp+0.01)/($h3k4me1_pregm+0.01);
            $fc_h3k4me1_ko_wt = ($h3k4me1_pregm_ko+0.01)/($h3k4me1_pregm+0.01);
            $fc_h3k27ac_gmp_pregm = ($h3k27ac_gmp+0.01)/($h3k27ac_pregm+0.01);
            $fc_h3k27ac_ko_wt = ($h3k27ac_pregm_ko+0.01)/($h3k27ac_pregm+0.01);
            $fc_pu1_gmp_pregm = ($pu1_gmp+0.01)/($pu1_pregm+0.01);
            $fc_pu1_ko_wt = ($pu1_pregm_ko+0.01)/($pu1_pregm+0.01);
            $fc_cebpa_gmp_pregm = ($cebpa_gmp+0.01)/($cebpa_pregm+0.01);
        } else {
            $fc_h3k4me1_gmp_pregm = 1;
            $fc_h3k4me1_ko_wt = 1; 
            $fc_h3k27ac_gmp_pregm = 1;
            $fc_h3k27ac_ko_wt = 1;
            $fc_pu1_gmp_pregm = 1;
            $fc_pu1_ko_wt = 1;
            $fc_cebpa_gmp_pregm = 1;
        }

        print "$des\t$stage\t$h3k27ac\t$h3k4me1\t$pu1\t$cebpa\t$cobound\t$distance\t";
        print "$fc_h3k4me1_gmp_pregm\t$fc_h3k4me1_ko_wt\t";
        print "$fc_h3k27ac_gmp_pregm\t$fc_h3k27ac_ko_wt\t";
        print "$fc_pu1_gmp_pregm\t$fc_pu1_ko_wt\t";
        print "$fc_cebpa_gmp_pregm\n";

        $des=(); $h3k27ac=(); $h3k4me1=(); $stage=(); $pu1=(); $cebpa=(); $cobound=(); $distance=();
        $h3k4me1_pregm=(); $h3k4me1_pregm_ko=(); $h3k4me1_gmp=();
        $h3k27ac_pregm=(); $h3k4me1_pregm_ko=(); $h3k27ac_gmp=();
        $pu1_pregm=(); $pu1_pregm_ko=(); $pu1_gmp=();
        $cebpa_pregm=(); $cebpa_gmp=();
        foreach(@F[0..'$((NCOL_GENE_FILE-1))']) { $des.="$_\t"; $seen{$id}=1; }
        $des=~s/\t$//g;
        $stage.="$F['$((NCOL_GENE_FILE+3))']";
        $h3k27ac.="$F['$((NCOL_GENE_FILE+6))']";
        $h3k4me1.="$F['$((NCOL_GENE_FILE+12))']";
        $pu1.="$F['$((NCOL_GENE_FILE+18))']";
        $cebpa.="$F['$((NCOL_GENE_FILE+23))']";
        if($F['$((NCOL_GENE_FILE+24))']=~/^\.$/ && $F['$((NCOL_GENE_FILE+6))']>0) {
            $F['$((NCOL_GENE_FILE+24))']="other";
        }
        if($F['$((NCOL_GENE_FILE+6))']>0) {
            $h3k4me1_pregm=$F['$((NCOL_GENE_FILE+11))'];
            $h3k4me1_pregm_ko=$F['$((NCOL_GENE_FILE+15))'];
            $h3k4me1_gmp=$F['$((NCOL_GENE_FILE+12))'];
            $h3k27ac_pregm=$F['$((NCOL_GENE_FILE+5))'];
            $h3k27ac_pregm_ko=$F['$((NCOL_GENE_FILE+9))'];
            $h3k27ac_gmp=$F['$((NCOL_GENE_FILE+6))'];
            $pu1_pregm=$F['$((NCOL_GENE_FILE+17))'];
            $pu1_pregm_ko=$F['$((NCOL_GENE_FILE+20))'];
            $pu1_gmp=$F['$((NCOL_GENE_FILE+18))'];
            $cebpa_pregm=$F['$((NCOL_GENE_FILE+22))'];
            $cebpa_gmp=$F['$((NCOL_GENE_FILE+23))'];
        }
        $cobound.="$F['$((NCOL_GENE_FILE+24))']";
        $distance.="$dist";
    }
    else {
        $stage.=";$F['$((NCOL_GENE_FILE+3))']";
        $h3k27ac.=";$F['$((NCOL_GENE_FILE+6))']";
        $h3k4me1.=";$F['$((NCOL_GENE_FILE+12))']";
        $pu1.=";$F['$((NCOL_GENE_FILE+18))']";
        $cebpa.=";$F['$((NCOL_GENE_FILE+23))']";
        if($F['$((NCOL_GENE_FILE+24))']=~/^\.$/ && $F['$((NCOL_GENE_FILE+6))']>0) {
            $F['$((NCOL_GENE_FILE+24))']="other";
            $h3k4me1_pregm=+$F['$((NCOL_GENE_FILE+11))'];
            $h3k4me1_pregm_ko=+$F['$((NCOL_GENE_FILE+15))'];
            $h3k4me1_gmp=+$F['$((NCOL_GENE_FILE+12))'];
            $h3k27ac_pregm=+$F['$((NCOL_GENE_FILE+5))'];
            $h3k27ac_pregm_ko=+$F['$((NCOL_GENE_FILE+9))'];
            $h3k27ac_gmp=+$F['$((NCOL_GENE_FILE+6))'];
            $pu1_pregm=+$F['$((NCOL_GENE_FILE+17))'];
            $pu1_pregm_ko=+$F['$((NCOL_GENE_FILE+20))'];
            $pu1_gmp=+$F['$((NCOL_GENE_FILE+18))'];
            $cebpa_pregm=+$F['$((NCOL_GENE_FILE+22))'];
            $cebpa_gmp=+$F['$((NCOL_GENE_FILE+23))'];
        }
        $cobound.=";$F['$((NCOL_GENE_FILE+24))']";
        $distance.=";$dist";
    } $i++; END { 
        print "$des\t$stage\t$h3k27ac\t$h3k4me1\t$pu1\t$cebpa\t$cobound\t$distance\t";
        print "$fc_h3k4me1_gmp_pregm\t$fc_h3k4me1_ko_wt\t";
        print "$fc_h3k27ac_gmp_pregm\t$fc_h3k27ac_ko_wt\t";
        print "$fc_pu1_gmp_pregm\t$fc_pu1_ko_wt\t";
        print "$fc_cebpa_gmp_pregm\n";
    }' | perl -ane '
        $cobound{"other"}{'stage'}=".";
        $cobound{"pu1"}{'stage'}=".";
        $cobound{"cebpa"}{'stage'}=".";
        $cobound{"pu1,cebpa"}{'stage'}=".";
        $cobound{"other"}{'count'}=0;
        $cobound{"pu1"}{'count'}=0;
        $cobound{"cebpa"}{'count'}=0;
        $cobound{"pu1,cebpa"}{'count'}=0;
        $cobound{"other"}{'h3k27ac'}=0;
        $cobound{"pu1"}{'h3k27ac'}=0;
        $cobound{"cebpa"}{'h3k27ac'}=0; 
        $cobound{"pu1,cebpa"}{'h3k27ac'}=0;
        $cobound{"other"}{'h3k4me1'}=0;
        $cobound{"pu1"}{'h3k4me1'}=0;
        $cobound{"cebpa"}{'h3k4me1'}=0;
        $cobound{"pu1,cebpa"}{'h3k4me1'}=0;
        $cobound{"other"}{'pu1'}=0;
        $cobound{"pu1"}{'pu1'}=0;
        $cobound{"cebpa"}{'pu1'}=0;
        $cobound{"pu1,cebpa"}{'pu1'}=0;
        $cobound{"other"}{'cebpa'}=0;
        $cobound{"pu1"}{'cebpa'}=0;
        $cobound{"cebpa"}{'cebpa'}=0;
        $cobound{"pu1,cebpa"}{'cebpa'}=0;
        $cobound{"other"}{'distance'}=();
        $cobound{"pu1"}{'distance'}=();
        $cobound{"cebpa"}{'distance'}=();
        $cobound{"pu1,cebpa"}{'distance'}=();
        @stage=split(/\;/,$F[15]);
        @h3k27ac=split(/\;/,$F[16]);
        @h3k4me1=split(/\;/,$F[17]);
        @pu1=split(/\;/,$F[18]);
        @cebpa=split(/\;/,$F[19]);
        @binding=split(/\;/,$F[20]);
        @distance=split(/\;/,$F[21]);
        #print "$_\n";
        for($i=0; $i<scalar(@binding); $i++) {
            #if($h3k27ac[$i] > $cobound{$binding[$i]}{'h3k27ac'}) {
                $cobound{$binding[$i]}{'h3k27ac'}+=$h3k27ac[$i];
                $cobound{$binding[$i]}{'h3k4me1'}+=$h3k4me1[$i];
                $cobound{$binding[$i]}{'pu1'}+=$pu1[$i];
                $cobound{$binding[$i]}{'cebpa'}+=$cebpa[$i];
                $cobound{$binding[$i]}{'distance'}.="$distance[$i];";
            #}
            $cobound{$binding[$i]}{'count'}++;
            #print "Hello\t$binding[$i]\t$h3k27ac[$i]\t$h3k4me1[$i]\t$pu1[$i]\t$cebpa[$i]\n\n";
        }
        foreach(@F[0..15]) { print "$_\t"; }
        #foreach $keys(keys(%cobound)) {
        #    if($cobound{$keys}{'count'}>0) {
        #        $cobound{$keys}{'h3k27ac'}=sprintf("%0.5f", $cobound{$keys}{'h3k27ac'}/$cobound{$keys}{'count'});
        #        $cobound{$keys}{'h3k4me1'}=sprintf("%0.5f", $cobound{$keys}{'h3k4me1'}/$cobound{$keys}{'count'});
        #        $cobound{$keys}{'pu1'}=sprintf("%0.5f", $cobound{$keys}{'pu1'}/$cobound{$keys}{'count'});
        #        $cobound{$keys}{'cebpa'}=sprintf("%0.5f", $cobound{$keys}{'cebpa'}/$cobound{$keys}{'count'});
        #    }
        #    print "Hi\t$keys\t$cobound{$keys}{'h3k27ac'}\t$cobound{$keys}{'h3k4me1'}\t$cobound{$keys}{'pu1'}\t$cobound{$keys}{'cebpa'}\n";
        #}
        if(!defined($cobound{"other"}{'distance'})) { $cobound{"other"}{'distance'}="NA"; } else { $cobound{"other"}{'distance'}=~s/\;$//g; }
        if(!defined($cobound{"pu1"}{'distance'})) { $cobound{"pu1"}{'distance'}="NA"; } else { $cobound{"pu1"}{'distance'}=~s/\;$//g; }
        if(!defined($cobound{"cebpa"}{'distance'})) { $cobound{"cebpa"}{'distance'}="NA"; } else { $cobound{"cebpa"}{'distance'}=~s/\;$//g; }
        if(!defined($cobound{"pu1,cebpa"}{'distance'})) { $cobound{"pu1,cebpa"}{'distance'}="NA"; } else { $cobound{"pu1,cebpa"}{'distance'}=~s/\;$//g; }
        printf("%d\t%d\t%d\t%d\t%0.5f\t%0.5f\t%0.5f\t%0.5f\t%0.5f\t%0.5f\t%0.5f\t%0.5f\t%0.5f\t%0.5f\t%0.5f\t%0.5f\t%0.5f\t%0.5f\t%0.5f\t%0.5f\t%s\t%s\t%s\t%s\t", $cobound{"other"}{'count'}, $cobound{"pu1"}{'count'}, $cobound{"cebpa"}{'count'}, $cobound{"pu1,cebpa"}{'count'}, $cobound{"other"}{'h3k27ac'}, $cobound{"pu1"}{'h3k27ac'}, $cobound{"cebpa"}{'h3k27ac'}, $cobound{"pu1,cebpa"}{'h3k27ac'}, $cobound{"other"}{'h3k4me1'}, $cobound{"pu1"}{'h3k4me1'}, $cobound{"cebpa"}{'h3k4me1'}, $cobound{"pu1,cebpa"}{'h3k4me1'}, $cobound{"other"}{'pu1'}, $cobound{"pu1"}{'pu1'}, $cobound{"cebpa"}{'pu1'}, $cobound{"pu1,cebpa"}{'pu1'}, $cobound{"other"}{'cebpa'}, $cobound{"pu1"}{'cebpa'}, $cobound{"cebpa"}{'cebpa'}, $cobound{"pu1,cebpa"}{'cebpa'}, $cobound{"other"}{'distance'}, $cobound{"pu1"}{'distance'}, $cobound{"cebpa"}{'distance'}, $cobound{"pu1,cebpa"}{'distance'});
        print "$F[22]\t$F[23]\t$F[24]\t$F[25]\t$F[26]\t$F[27]\t$F[28]\n";' | perl -ane '
        $sum=$F[16]+$F[17]+$F[18]+$F[19];
        chomp($_);
        $class="none";
        $distance="none";
        if($sum>0) {
            $max_index=1; $max=0; $i=1;
            foreach(@F[20..23]) {
                if($_ > $max) {
                    $max=$_;
                    $max_index=$i;
                }
                $i++;
            }
            #print "Hello\t$max_index\n\n";
            if($max_index==1) { $class="other"; $distance=$F[36]; }
            elsif($max_index==2) { $class="pu1"; $distance=$F[37]; }
            elsif($max_index==3) { $class="cebpa"; $distance=$F[38]; }
            else { $class="pu1,cebpa"; $distance=$F[39]; }
        }
        print "$_\t$distance\t$class\n";' > $BED_FILE.gene

<<"COMMENT"
intersectBed -a $GENE_FILE -b <(cut -f 1-3,16-35 $BED_FILE | grep -v start) -wao | sortBed -i stdin | cut -f 1-6,8-15,19-38 | perl -ane '
    $id="$F[0]_$F[1]_$F[2]";
    $line=();
    for($i=0; $i<=13; $i++) { 
        $line.="$F[$i]\t";
    }
    $line=~s/\t$//g;
    $seen{$id}{'gene'}=$line;
    for($i=14; $i<=33; $i++) {
        if($F[$i]=~/^\.$/) { $F[$i]=0; }
        $seen{$id}{$i}+=$F[$i];
    }
    END {
        foreach $id(keys(%seen)) {
            print "$seen{$id}{'gene'}\t";
            $line=();
            for($i=14; $i<=33; $i++) {
                $line.="$seen{$id}{$i}\t";
            }
            $line=~s/\t$//g;
            print "$line\n";
        }
    }
' | sortBed -i stdin > $BED_FILE.gene_summary
COMMENT

## remove temporary file
if [ ! -z "$TMP" ]; then
    rm $TMP
fi
